/**
 * Project structure for Node, Express, Sequlize, Swagger
 */

export const NessStructure: TreeItem[] = [
    {
        type: 'directory',
        name: 'config',
        childs: [
            {
                type: 'file',
                name: 'index.ts',
                description: 'config entry point',
                contents: [
                    `import { swaggerCredential, swaggerSpecs } from './swagger'`,
                    `import multer from 'multer'`,
                    `import { randomUUID } from 'crypto'`,
                    `export const ZIP_UPLOAD_DIR = '/tmp/'`,
                    `export const IMAGE_UPLOAD_DIR = process.env.IMAGE_UPLOAD_DIR || 'upload/'`,
                    ``,
                    `export default {`,
                    `    migrate: ['production'].includes(process.env.NODE_ENV),`,
                    `    port: process.env.API_PORT || '7000',`,
                    `    swaggerSpecs,`,
                    `    swaggerCredential,`,
                    `    storage: multer.diskStorage({`,
                    `        destination: (req, file, cb) => {`,
                    `            const UPLOAD_DIR =`,
                    `                file.mimetype === 'application/zip'`,
                    `                    ? ZIP_UPLOAD_DIR`,
                    `                    : IMAGE_UPLOAD_DIR`,
                    `            cb(null, UPLOAD_DIR)`,
                    `        },`,
                    `        filename: (req, file, cb) => {`,
                    `            const name = randomUUID()`,
                    `            let ext = 'jpg'`,
                    `            if (file.mimetype === 'application/zip') ext = 'zip'`,
                    `            cb(null, \`\${name}.\${ext}\`)`,
                    `        }`,
                    `    }),`,
                    `}`
                ]
            },
            {
                type: 'file',
                name: 'connection.ts',
                description: 'To store all connection related',
                contents: [
                    `import { Options } from 'sequelize'`,
                    ``,
                    `export const development: Options = {`,
                    `    database: '$L:APP_NAME_dev',`,
                    `    username: '$DB_USER',`,
                    `    password: '$DB_PASS',`,
                    `    host: '$L:APP_NAME-db',`,
                    `    port: 5432,`,
                    `    dialect: 'postgres',`,
                    `    logging: false,`,
                    `    pool: {`,
                    `        max: 5,`,
                    `        min: 0,`,
                    `        idle: 10000`,
                    `    }`,
                    `}`,
                    ``,
                    `export const testing: Options = {`,
                    `    database: '$L:APP_NAME_test',`,
                    `    username: '$DB_USER',`,
                    `    password: '$DB_PASS',`,
                    `    host: '127.0.0.1',`,
                    `    port: 35432,`,
                    `    dialect: 'postgres',`,
                    `    logging: false`,
                    `}`,
                    ``,
                    `export const production: Options = {`,
                    `    database: process.env.DB_NAME || '$L:APP_NAME',`,
                    `    username: process.env.DB_USER || '$DB_USER',`,
                    `    password: process.env.DB_PASS || '$DB_PASS',`,
                    `    host: process.env.DB_HOST || 'localhost',`,
                    `    dialect: 'postgres',`,
                    `    logging: false,`,
                    `    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,`,
                    `    pool: {`,
                    `        max: 50,`,
                    `        min: 0,`,
                    `        idle: 10000`,
                    `    }`,
                    `}`,
                    `export const dbConnection =`,
                    `    process.env.NODE_ENV === 'production'`,
                    `        ? production`,
                    `        : process.env.NODE_ENV === 'development'`,
                    `        ? development`,
                    `        : testing`
                ]
            },
            {
                type: 'file',
                name: 'database.ts',
                description: 'to store sequelize database configuration',
                contents: [
                    `import { Sequelize } from 'sequelize'`,
                    `import { production, testing, development } from './connection'`,
                    ``,
                    `export const sequelize: Sequelize =`,
                    `    process.env.NODE_ENV === 'production'`,
                    `        ? new Sequelize(production)`,
                    `        : process.env.NODE_ENV === 'testing'`,
                    `        ? new Sequelize(testing)`,
                    `        : new Sequelize(development)`
                ]
            },
            {
                type: 'file',
                name: 'swagger.ts',
                description: 'store all swagger configuration',
                contents: [
                    `import swaggerJsDoc from 'swagger-jsdoc'`,
                    `const swaggerOptions = {`,
                    `    definition: {`,
                    `        openapi: '3.0.0',`,
                    `        info: {`,
                    `            title: '$APP_NAME API',`,
                    `            version: '1.0.0',`,
                    `            description: '$APP_NAME API'`,
                    `        },`,
                    `        components: {`,
                    `            securitySchemes: {`,
                    `                bearerAuth: {`,
                    `                    type: 'http',`,
                    `                    scheme: 'bearer',`,
                    `                    bearerFormat: 'JWT'`,
                    `                }`,
                    `            }`,
                    `        },`,
                    `        servers: [`,
                    `            {`,
                    `                url: '/api',`,
                    `                description: 'API'`,
                    `            }`,
                    `        ]`,
                    `    },`,
                    `    apis: ['./src/routes/*.ts', './src/models/*.ts', './src/routes/*.js', './src/models/*.js']`,
                    `}`,
                    `export const swaggerCredential = {`,
                    `    username: '$SWAGGER_USER',`,
                    `    password: '$SWAGGER_PASS'`,
                    `}`,
                    ``,
                    `export const swaggerSpecs = swaggerJsDoc(swaggerOptions)`
                ]
            }
        ]
    },
    {
        type: 'directory',
        name: 'sql',
        childs: [
            {
                type: 'directory',
                name: 'functions',
                description:
                    'Store all sql file for generating database functions'
            },
            {
                type: 'directory',
                name: 'migrations',
                description: 'Store all sql file for migrating database'
            },
            {
                type: 'file',
                name: 'initdb.sql',
                contents: [
                    `create database $L:APP_NAME;`,
                    `create database $L:APP_NAME_dev;`,
                    `create database $L:APP_NAME_test;`
                ]
            }
        ]
    },
    {
        type: 'directory',
        name: 'src',
        childs: [
            {
                type: 'directory',
                name: 'models',
                childs: [
                    {
                        type: 'file',
                        name: 'organization.model.ts',
                        contents: [
                            `import {`,
                            `    HasManyCreateAssociationMixin, Model,`,
                            `    STRING, TEXT, UUID,`,
                            `    UUIDV4`,
                            `} from 'sequelize'`,
                            `import { sequelize } from '../../config/database'`,
                            `import { User } from './user.model'`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * components:`,
                            ` *   schemas:`,
                            ` *     Organization:`,
                            ` *       type: object`,
                            ` *       properties:`,
                            ` *         id:`,
                            ` *           type: string`,
                            ` *           format: uuid`,
                            ` *         name:`,
                            ` *           type: string`,
                            ` *         address:`,
                            ` *           type: string`,
                            ` *         phone:`,
                            ` *           type: string`,
                            ` *         createdAt:`,
                            ` *           type: string`,
                            ` *         updatedAt:`,
                            ` *           type: string`,
                            ` *`,
                            ` */`,
                            `export class Organization extends Model {`,
                            `    id: string`,
                            `    name: string`,
                            `    address: string`,
                            `    createUser: HasManyCreateAssociationMixin<User>`,
                            `}`,
                            `Organization.init(`,
                            `    {`,
                            `        id: {`,
                            `            allowNull: false,`,
                            `            defaultValue: UUIDV4,`,
                            `            primaryKey: true,`,
                            `            type: UUID,`,
                            `            validate: {`,
                            `                isUUID: 4`,
                            `            }`,
                            `        },`,
                            `        name: {`,
                            `            type: STRING(50)`,
                            `        },`,
                            `        address: {`,
                            `            type: TEXT`,
                            `        },`,
                            `        phone: {`,
                            `            type: STRING(20)`,
                            `        }`,
                            `    },`,
                            `    { tableName: 'Organizations', sequelize }`,
                            `)`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'user.model.ts',
                        contents: [
                            `import {`,
                            `    BOOLEAN, HasManyAddAssociationMixin, HasManyCreateAssociationMixin, HasManyGetAssociationsMixin, HasOneGetAssociationMixin, Model, STRING, UUID,`,
                            `    UUIDV4`,
                            `} from 'sequelize'`,
                            `import { sequelize } from '../../config/database'`,
                            `import { password } from '../services/bcrypt.service'`,
                            `import { Organization } from './organization.model'`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * components:`,
                            ` *   schemas:`,
                            ` *     UserRole:`,
                            ` *       type: object`,
                            ` *       properties:`,
                            ` *         id:`,
                            ` *           type: string`,
                            ` *           format: uuid`,
                            ` *           example: d9c95bb6-21b6-4748-945d-678bfddc2de7`,
                            ` *         email:`,
                            ` *           type: string`,
                            ` *           format: email`,
                            ` *           example: test@email.com`,
                            ` *         firstName:`,
                            ` *           type: string`,
                            ` *           example: John`,
                            ` *         lastName:`,
                            ` *           type: string`,
                            ` *           example: Doe`,
                            ` *         createdAt:`,
                            ` *           type: string`,
                            ` *           example: 2021-06-12T08:28:04.986Z`,
                            ` *         updatedAt:`,
                            ` *           type: string`,
                            ` *           example: 2021-06-12T08:28:04.986Z`,
                            ` *`,
                            ` */`,
                            ``,
                            `export class User extends Model {`,
                            `    public id: string`,
                            `    public email: string`,
                            `    public password: string`,
                            `    public firstName: string`,
                            `    public lastName: string`,
                            `    public UserRoles: UserRole[]`,
                            `    addUserRoles: HasManyAddAssociationMixin<UserRole, UserRole[]>`,
                            `    getUserRoles: HasManyGetAssociationsMixin<UserRole>`,
                            `    getOrganization: HasOneGetAssociationMixin<Organization>`,
                            `}`,
                            `User.init(`,
                            `    {`,
                            `        id: {`,
                            `            allowNull: false,`,
                            `            defaultValue: UUIDV4,`,
                            `            primaryKey: true,`,
                            `            type: UUID,`,
                            `            validate: {`,
                            `                isUUID: 4`,
                            `            }`,
                            `        },`,
                            `        email: {`,
                            `            type: STRING(50),`,
                            `            unique: true`,
                            `        },`,
                            `        password: {`,
                            `            type: STRING`,
                            `        },`,
                            `        firstName: {`,
                            `            type: STRING(50)`,
                            `        },`,
                            `        lastName: {`,
                            `            type: STRING(50)`,
                            `        }`,
                            `    },`,
                            `    { tableName: 'Users', sequelize }`,
                            `)`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * components:`,
                            ` *   schemas:`,
                            ` *     User:`,
                            ` *       type: object`,
                            ` *       properties:`,
                            ` *         id:`,
                            ` *           type: string`,
                            ` *           format: uuid`,
                            ` *           example: d9c95bb6-21b6-4748-945d-678bfddc2de7`,
                            ` *         name:`,
                            ` *           type: string`,
                            ` *           example: Admin`,
                            ` *         enable:`,
                            ` *           type: boolean`,
                            ` *           example: true`,
                            ` *         createdAt:`,
                            ` *           type: string`,
                            ` *           example: 2021-06-12T08:28:04.986Z`,
                            ` *         updatedAt:`,
                            ` *           type: string`,
                            ` *           example: 2021-06-12T08:28:04.986Z`,
                            ` *`,
                            ` */`,
                            `export class UserRole extends Model {`,
                            `    id: string`,
                            `    name: string`,
                            `    enable: boolean`,
                            `}`,
                            `UserRole.init(`,
                            `    {`,
                            `        id: {`,
                            `            allowNull: false,`,
                            `            defaultValue: UUIDV4,`,
                            `            primaryKey: true,`,
                            `            type: UUID,`,
                            `            validate: {`,
                            `                isUUID: 4`,
                            `            }`,
                            `        },`,
                            `        name: {`,
                            `            type: STRING(50),`,
                            `            unique: true`,
                            `        },`,
                            `        enable: {`,
                            `            type: BOOLEAN,`,
                            `            allowNull: false,`,
                            `            defaultValue: true`,
                            `        }`,
                            `    },`,
                            `    { tableName: 'UserRoles', sequelize }`,
                            `)`,
                            ``,
                            `User.beforeCreate('UserBeforeCreate', (user) => {`,
                            `    user.password = password(user)`,
                            `})`,
                            ``,
                            `// eslint-disable-next-line`,
                            `User.prototype.toJSON = function () {`,
                            `    const values = Object.assign({}, this.get())`,
                            `    delete values.password`,
                            `    return values`,
                            `}`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'migration.model.ts',
                        contents: [
                            `import { Model, STRING, UUID, UUIDV4 } from 'sequelize'`,
                            `import { sequelize } from '../../config/database'`,
                            ``,
                            `export class Migration extends Model {`,
                            `    id: string`,
                            `    name: string`,
                            `}`,
                            `Migration.init(`,
                            `    {`,
                            `        id: {`,
                            `            allowNull: false,`,
                            `            defaultValue: UUIDV4,`,
                            `            primaryKey: true,`,
                            `            type: UUID,`,
                            `            validate: {`,
                            `                isUUID: 4`,
                            `            }`,
                            `        },`,
                            `        name: {`,
                            `            type: STRING,`,
                            `            allowNull: false`,
                            `        }`,
                            `    },`,
                            `    { tableName: 'Migrations', sequelize }`,
                            `)`
                        ]
                    }
                ]
            },
            {
                type: 'directory',
                name: 'controllers',
                childs: [
                    {
                        type: 'file',
                        name: 'organization.controller.ts',
                        contents: [
                            `import { Error, Message } from '../commons/constant'`,
                            `import { Request, Response } from 'express'`,
                            `import { Organization } from '../models/organization.model'`,
                            `export const OrganizationController = {`,
                            `    create: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { name, address, phone, parentId } = req.body`,
                            `            if (!name) return res.status(400).json(Error.NameRequired)`,
                            `            if (!phone) return res.status(400).json(Error.PhoneRequired)`,
                            ``,
                            `            const result = await Organization.create({`,
                            `                name,`,
                            `                address,`,
                            `                phone,`,
                            `                parentId`,
                            `            })`,
                            `            return res.status(200).json(result)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    update: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id } = req.params`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            ``,
                            `            const { name, address, phone, parentId } = req.body`,
                            `            if (!name) return res.status(400).json(Error.NameRequired)`,
                            `            if (!phone) return res.status(400).json(Error.PhoneRequired)`,
                            ``,
                            `            await Organization.update(`,
                            `                { name, address, phone, parentId },`,
                            `                { where: { id } }`,
                            `            )`,
                            `            const result = await Organization.findByPk(id)`,
                            `            return res.status(200).json(result)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    getOne: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id } = req.params`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            `            const data = await Organization.findByPk(id)`,
                            `            if (!data) return res.status(400).json(Error.DataNotFound)`,
                            `            return res.status(200).json(data)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    getAll: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const data = await Organization.findAll()`,
                            `            if (!data) return res.status(400).json(Error.DataNotFound)`,
                            ``,
                            `            return res.status(200).json(data)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    remove: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id } = req.params`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            `            const existing = await Organization.findByPk(id)`,
                            `            if (!existing) return res.status(400).json(Error.DataNotFound)`,
                            `            await existing.destroy()`,
                            `            return res.status(200).json(Message.DataRemoved)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    }`,
                            `}`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'user.controller.ts',
                        contents: [
                            `import { Error, UserRoles, Message } from '../commons/constant'`,
                            `import { Request, Response } from 'express'`,
                            `import { User, UserRole } from '../models/user.model'`,
                            `import { AuthService } from '../services/auth.service'`,
                            `import { comparePassword } from '../services/bcrypt.service'`,
                            `import { Organization } from '../models/organization.model'`,
                            `import { difference } from '../commons/function'`,
                            ``,
                            `export const UserController = {`,
                            `    register: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { email, password, confirmPassword, firstName, lastName, orgId, roleId } = req.body`,
                            `            if (!orgId) return res.status(400).json(Error.OrgIdRequired)`,
                            `            if (!email || !password || !confirmPassword || !firstName || !roleId) return res.status(400).json(Error.UserDataRequired)`,
                            ``,
                            `            if (password !== confirmPassword) return res.status(400).json(Error.PasswordMismatch)`,
                            ``,
                            `            const org = await Organization.findByPk(orgId)`,
                            `            if (!org) return res.status(400).json('Organization not found')`,
                            `            const selectedRole = await UserRole.findByPk(roleId)`,
                            `            const newUser = await org.createUser({`,
                            `                email,`,
                            `                password,`,
                            `                firstName,`,
                            `                lastName,`,
                            `                OrganizationId: orgId`,
                            `            })`,
                            `            await newUser.addUserRoles(selectedRole)`,
                            `            const roles = selectedRole.name as UserRoles`,
                            `            const token = AuthService.issue({`,
                            `                id: newUser.id,`,
                            `                ip: req.ip,`,
                            `                roles: [roles],`,
                            `                orgId: org.id`,
                            `            })`,
                            `            const createdUser = await User.findByPk(newUser.id, {`,
                            `                include: [`,
                            `                    { model: UserRole, attributes: ['id', 'name'] },`,
                            `                    { model: Organization, attributes: ['id', 'name'] }`,
                            `                ]`,
                            `            })`,
                            `            return res.status(200).json({ token, user: createdUser })`,
                            `        } catch (err) {`,
                            `            console.log(err)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    login: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { email, password } = req.body`,
                            `            if (!email || !password) return res.status(400).json(Error.InvalidCredential)`,
                            ``,
                            `            const user = await User.findOne({`,
                            `                where: {`,
                            `                    email`,
                            `                },`,
                            `                include: [{ model: Organization }, { model: UserRole }]`,
                            `            })`,
                            ``,
                            `            if (!user) return res.status(400).json(Error.InvalidCredential)`,
                            `            if (comparePassword(password, user.password)) {`,
                            `                const userRoles = await user.getUserRoles()`,
                            `                const roles = userRoles.map((x) => x.name)`,
                            `                const userData = { ...user.toJSON(), roles }`,
                            `                const org = await user.getOrganization()`,
                            `                const token = AuthService.issue({`,
                            `                    id: user.id,`,
                            `                    ip: req.ip,`,
                            `                    roles,`,
                            `                    orgId: org.id`,
                            `                })`,
                            `                return res.status(200).json({ token, user: userData })`,
                            `            }`,
                            `            return res.status(401).json(Error.Unauthorized)`,
                            `        } catch (err) {`,
                            `            console.log(err)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    validate: (req: Request, res: Response) => {`,
                            `        const { token } = req.params`,
                            ``,
                            `        AuthService.verify(token, (err, result) => {`,
                            `            if (err) {`,
                            `                return res.status(401).json(Error.InvalidToken)`,
                            `            }`,
                            `            return res.status(200).json(result)`,
                            `        })`,
                            `    },`,
                            `    getAll: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const users = await User.findAll({`,
                            `                include: [`,
                            `                    { model: Organization, attributes: ['id', 'name'] },`,
                            `                    { model: UserRole, attributes: ['id', 'name'] }`,
                            `                ]`,
                            `            })`,
                            `            return res.status(200).json(users)`,
                            `        } catch (err) {`,
                            `            console.log(err)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    update: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id } = req.body`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            `            const existing = await User.findByPk(id, {`,
                            `                include: [{ model: Organization }, { model: UserRole }]`,
                            `            })`,
                            `            if (!existing) return res.status(400).json(Error.DataNotFound)`,
                            `            const changes = difference(req.body, existing.get({ plain: true }))`,
                            `            const updated = await User.findByPk(id)`,
                            `            return res.status(200).json(updated)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    remove: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id } = req.params`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            `            const check = User.findByPk(id)`,
                            `            if (!check) return res.status(400).json(Error.DataNotFound)`,
                            `            await User.destroy({ where: { id } })`,
                            `            return res.status(200).json(Message.DataRemoved)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    }`,
                            `}`,
                            ``,
                            `export const UserRoleController = {`,
                            `    getAll: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const data = await UserRole.findAll({ ...req.query })`,
                            `            if (!data) return res.status(400).json(Error.DataNotFound)`,
                            `            return res.status(200).json(data)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    create: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { name, enable } = req.params`,
                            `            if (!name) return res.status(400).json(Error.NameRequired)`,
                            `            const data = await UserRole.findOne({ where: { name } })`,
                            `            if (data) return res.status(400).json(Error.NameAlreadyExist)`,
                            `            const newRecord = UserRole.create({ name, enable: enable || false })`,
                            `            return res.status(200).json(newRecord)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    update: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id, name, enable } = req.body`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            `            const existing = await UserRole.findByPk(id)`,
                            `            if (!existing) return res.status(400).json(Error.DataNotFound)`,
                            `            existing.name !== name && (await existing.update({ name }))`,
                            `            existing.enable !== enable && (await existing.update({ enable }))`,
                            `            const updated = await UserRole.findByPk(id)`,
                            `            return res.status(200).json(updated)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    },`,
                            `    remove: async (req: Request, res: Response) => {`,
                            `        try {`,
                            `            const { id } = req.params`,
                            `            if (!id) return res.status(400).json(Error.IdRequired)`,
                            `            const check = UserRole.findByPk(id)`,
                            `            if (!check) return res.status(400).json(Error.DataNotFound)`,
                            `            await UserRole.destroy({ where: { id } })`,
                            `            return res.status(200).json(Message.DataRemoved)`,
                            `        } catch (e) {`,
                            `            console.log(e)`,
                            `            return res.status(500).json(Error.InternalError)`,
                            `        }`,
                            `    }`,
                            `}`
                        ]
                    }
                ]
            },
            {
                type: 'directory',
                name: 'routes',
                childs: [
                    {
                        type: 'file',
                        name: 'index.ts',
                        contents: [
                            `import express from 'express'`,
                            `import { default as AuthRoute } from './auth.route'`,
                            `import { default as UserRoute } from './user.route'`,
                            `import { default as OrganizationRoute } from './organization.route'`,
                            `const router = express.Router()`,
                            ``,
                            `router.use(AuthRoute)`,
                            `router.use(UserRoute)`,
                            `router.use(OrganizationRoute)`,
                            ``,
                            `export default router`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'auth.route.ts',
                        contents: [
                            `import express from 'express'`,
                            `import { UserController } from '../controllers/user.controller'`,
                            `import { AuthPolicy } from '../policies/auth.policy'`,
                            `const router = express.Router()`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /login:`,
                            ` *  post:`,
                            ` *    summary: Authenticate user`,
                            ` *    tags: [Authentication]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            properties:`,
                            ` *              email:`,
                            ` *                type: string`,
                            ` *                format: email`,
                            ` *                example: test@email.com`,
                            ` *              password:`,
                            ` *                type: string`,
                            ` *                format: password`,
                            ` *                example: secret`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: User authenticated`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              properties:`,
                            ` *                token:`,
                            ` *                  type: string`,
                            ` *                user:`,
                            ` *                  type: object`,
                            ` *                  properties:`,
                            ` *                    $ref: '#/components/schemas/User'`,
                            ` * /verify/{token}:`,
                            ` *  get:`,
                            ` *    summary: verifiy token`,
                            ` *    tags: [Authentication]`,
                            ` *    parameters:`,
                            ` *      - name: token`,
                            ` *        in: path`,
                            ` *        required: true`,
                            ` *        schema:`,
                            ` *          type: string`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: user data`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/User'`,
                            ` *`,
                            ` */`,
                            `router.post('/login', UserController.login)`,
                            `router.get('/verify/:token', UserController.validate)`,
                            `export default router`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'organization.route.ts',
                        contents: [
                            `import express from 'express'`,
                            `import { OrganizationController } from '../controllers/organization.controller'`,
                            `import { AuthPolicy } from '../policies/auth.policy'`,
                            `const router = express.Router()`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /orgs:`,
                            ` *   get:`,
                            ` *     security:`,
                            ` *       - bearerAuth: []`,
                            ` *     summary: Returns all Organization`,
                            ` *     tags: [Organizations]`,
                            ` *     responses:`,
                            ` *       200:`,
                            ` *         description: the list of organizations`,
                            ` *         content:`,
                            ` *           application/json:`,
                            ` *             schema:`,
                            ` *               type: array`,
                            ` *               items:`,
                            ` *                type: object`,
                            ` *                $ref: '#/components/schemas/Organization'`,
                            ` *`,
                            ` */`,
                            `router.get('/orgs', AuthPolicy.verifyToken, OrganizationController.getAll)`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /orgs/{id}:`,
                            ` *   get:`,
                            ` *     security:`,
                            ` *       - bearerAuth: []`,
                            ` *     summary: Returns organization by id`,
                            ` *     tags: [Organizations]`,
                            ` *     parameters:`,
                            ` *       - name: id`,
                            ` *         in: path`,
                            ` *         required: true`,
                            ` *         schema:`,
                            ` *           type: string`,
                            ` *           format: uuid`,
                            ` *     responses:`,
                            ` *       200:`,
                            ` *         description: the data of organizations`,
                            ` *         content:`,
                            ` *           application/json:`,
                            ` *             schema:`,
                            ` *               type: object`,
                            ` *               $ref: '#/components/schemas/Organization'`,
                            ` *`,
                            ` */`,
                            `router.get('/orgs/:id', AuthPolicy.verifyToken, OrganizationController.getOne)`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /orgs:`,
                            ` *  post:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: create new organization`,
                            ` *    tags: [Organizations]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            properties:`,
                            ` *              name:`,
                            ` *                type: string`,
                            ` *              address:`,
                            ` *                type: string`,
                            ` *              phone:`,
                            ` *                type: string`,
                            ` *                format: phone`,
                            ` *              parentId:`,
                            ` *                type: string`,
                            ` *                format: uuid`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: the data of organizations`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/Organization'`,
                            ` *`,
                            ` */`,
                            `router.post('/orgs', AuthPolicy.verifyToken, OrganizationController.create)`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /orgs/{id}:`,
                            ` *  put:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: update organization`,
                            ` *    tags: [Organizations]`,
                            ` *    parameters:`,
                            ` *      - name: id`,
                            ` *        in: path`,
                            ` *        required: true`,
                            ` *        schema:`,
                            ` *          type: string`,
                            ` *          format: uuid`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            properties:`,
                            ` *              name:`,
                            ` *                type: string`,
                            ` *              address:`,
                            ` *                type: string`,
                            ` *              phone:`,
                            ` *                type: string`,
                            ` *                format: phone`,
                            ` *              parentId:`,
                            ` *                type: string`,
                            ` *                format: uuid`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: the updated data of organizations`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/Organization'`,
                            ` *`,
                            ` */`,
                            `router.put('/orgs/:id', AuthPolicy.verifyToken, OrganizationController.update)`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /orgs/{id}:`,
                            ` *  delete:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: update organization`,
                            ` *    tags: [Organizations]`,
                            ` *    parameters:`,
                            ` *      - name: id`,
                            ` *        in: path`,
                            ` *        required: true`,
                            ` *        schema:`,
                            ` *          type: string`,
                            ` *          format: uuid`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: the updated data of organizations`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/Organization'`,
                            ` *`,
                            ` */`,
                            `router.delete(`,
                            `    '/orgs/:id',`,
                            `    AuthPolicy.verifyToken,`,
                            `    OrganizationController.remove`,
                            `)`,
                            ``,
                            `export default router`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'user.route.ts',
                        contents: [
                            `import express from 'express'`,
                            `import {`,
                            `    UserController,`,
                            `    UserRoleController`,
                            `} from '../controllers/user.controller'`,
                            `import { AuthPolicy } from '../policies/auth.policy'`,
                            `const router = express.Router()`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /users:`,
                            ` *  get:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: Returns all Users`,
                            ` *    tags: [Users]`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: the list of users`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: array`,
                            ` *              items:`,
                            ` *               type: object`,
                            ` *               $ref: '#/components/schemas/User'`,
                            ` *  post:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: Create user`,
                            ` *    tags: [Users]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            properties:`,
                            ` *              firstName:`,
                            ` *                type: string`,
                            ` *                example: John`,
                            ` *              lastName:`,
                            ` *                type: string`,
                            ` *                example: Doe`,
                            ` *              email:`,
                            ` *                type: string`,
                            ` *                format: email`,
                            ` *                exmaple: test@email.com`,
                            ` *              password:`,
                            ` *                type: string`,
                            ` *                format: password`,
                            ` *                exmaple: SuperS3cret`,
                            ` *              confirmPassword:`,
                            ` *                type: string`,
                            ` *                format: password`,
                            ` *                example: SuperS3cret`,
                            ` *              orgId:`,
                            ` *                type: string`,
                            ` *                format: uuid`,
                            ` *              roleId:`,
                            ` *                type: string`,
                            ` *                format: uuid`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: User created`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              properties:`,
                            ` *                token:`,
                            ` *                  type: string`,
                            ` *                user:`,
                            ` *                  type: object`,
                            ` *                  properties:`,
                            ` *                    $ref: '#/components/schemas/User'`,
                            ` *  put:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: updaye user`,
                            ` *    tags: [Users]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            $ref: '#/components/schemas/User'`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: updated user`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: array`,
                            ` *              items:`,
                            ` *               type: object`,
                            ` *               $ref: '#/components/schemas/User'`,
                            ` *  delete:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: remove user`,
                            ` *    tags: [Users]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            $ref: '#/components/schemas/User'`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: updated user`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: string`,
                            ` *`,
                            ` */`,
                            `router.get('/users', AuthPolicy.verifyToken, AuthPolicy.isSuperAdmin, UserController.getAll)`,
                            `router.post('/users', AuthPolicy.verifyToken, AuthPolicy.isSuperAdmin, UserController.register)`,
                            `router.put('/users', AuthPolicy.verifyToken, AuthPolicy.isSuperAdmin, UserController.update)`,
                            `router.delete('/users', AuthPolicy.verifyToken, AuthPolicy.isSuperAdmin, UserController.remove)`,
                            ``,
                            `/**`,
                            ` * @swagger`,
                            ` * /roles:`,
                            ` *  get:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: Roles data`,
                            ` *    tags: [Roles]`,
                            ` *    parameters:`,
                            ` *      - name: id`,
                            ` *        in: query`,
                            ` *        required: false`,
                            ` *        schema:`,
                            ` *          type: string`,
                            ` *          format: uuid`,
                            ` *      - name: name`,
                            ` *        in: query`,
                            ` *        required: false`,
                            ` *        schema:`,
                            ` *          type: string`,
                            ` *      - name: enable`,
                            ` *        in: query`,
                            ` *        required: false`,
                            ` *        schema:`,
                            ` *          type: boolean`,
                            ` *          example: true`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: the list of roles`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: array`,
                            ` *              items:`,
                            ` *               type: object`,
                            ` *               $ref: '#/components/schemas/UserRole'`,
                            ` *  post:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: create new roles`,
                            ` *    tags: [Roles]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            properties:`,
                            ` *              name:`,
                            ` *                type: string`,
                            ` *                example: Admin`,
                            ` *              enable:`,
                            ` *                type: boolean`,
                            ` *                example: true`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: created roles`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/UserRole'`,
                            ` *  put:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: update existing roles`,
                            ` *    tags: [Roles]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            $ref: '#/components/schemas/UserRole'`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: updated roles`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/UserRole'`,
                            ` *  delete:`,
                            ` *    security:`,
                            ` *      - bearerAuth: []`,
                            ` *    summary: remove existing roles`,
                            ` *    tags: [Roles]`,
                            ` *    requestBody:`,
                            ` *      required: true`,
                            ` *      content:`,
                            ` *        application/json:`,
                            ` *          schema:`,
                            ` *            type: object`,
                            ` *            $ref: '#/components/schemas/UserRole'`,
                            ` *    responses:`,
                            ` *      200:`,
                            ` *        description: removed roles`,
                            ` *        content:`,
                            ` *          application/json:`,
                            ` *            schema:`,
                            ` *              type: object`,
                            ` *              $ref: '#/components/schemas/UserRole'`,
                            ` *`,
                            ` */`,
                            `router.get(`,
                            `    '/roles',`,
                            `    AuthPolicy.verifyToken,`,
                            `    AuthPolicy.isSuperAdmin,`,
                            `    UserRoleController.getAll`,
                            `)`,
                            `router.post(`,
                            `    '/roles',`,
                            `    AuthPolicy.verifyToken,`,
                            `    AuthPolicy.isSuperAdmin,`,
                            `    UserRoleController.create`,
                            `)`,
                            `router.put(`,
                            `    '/roles',`,
                            `    AuthPolicy.verifyToken,`,
                            `    AuthPolicy.isSuperAdmin,`,
                            `    UserRoleController.update`,
                            `)`,
                            `router.delete(`,
                            `    '/roles',`,
                            `    AuthPolicy.verifyToken,`,
                            `    AuthPolicy.isSuperAdmin,`,
                            `    UserRoleController.remove`,
                            `)`,
                            ``,
                            `export default router`
                        ]
                    }
                ]
            },
            {
                type: 'directory',
                name: 'commons',
                childs: [
                    {
                        type: 'file',
                        name: 'function.ts',
                        contents: [
                            `import moment from 'moment'`,
                            `import { iPrintLog } from './interface'`,
                            `import { User } from '../models/user.model'`,
                            `import { TerminalColor } from './constant'`,
                            `import _ from 'lodash'`,
                            ``,
                            `export const currentTimestamp = () => moment().format('YYYY-MM-DD HH:mm:ss')`,
                            `function promiseAllStepN(n: number, list: any) {`,
                            `    let tail = list.splice(n)`,
                            `    let head = list`,
                            `    let resolved = []`,
                            `    let processed = 0`,
                            `    return new Promise((resolve) => {`,
                            `        head.forEach((x: any) => {`,
                            `            resolved.push(x)`,
                            `            x.then((y: any) => {`,
                            `                runNext()`,
                            `                return y`,
                            `            })`,
                            `        })`,
                            `        function runNext() {`,
                            `            if (processed === tail.length) {`,
                            `                resolve(Promise.all(resolved))`,
                            `            } else {`,
                            `                resolved.push(`,
                            `                    tail[processed].then((x: any) => {`,
                            `                        runNext()`,
                            `                        return x`,
                            `                    })`,
                            `                )`,
                            `                processed++`,
                            `            }`,
                            `        }`,
                            `    })`,
                            `}`,
                            `export const PromiseAllConcurrent = (n: number) => (list: any) => promiseAllStepN(n, list)`,
                            `export const printLog = (`,
                            `    message: any,`,
                            `    options: iPrintLog = { includeProd: false, type: 'default' }`,
                            `) => {`,
                            `    if (`,
                            `        process.env.NODE_ENV !== 'production' ||`,
                            `        options.includeProd ||`,
                            `        process.env.DEBUG === 'true'`,
                            `    ) {`,
                            `        let color = TerminalColor.FgWhite`,
                            `        let bgColor = TerminalColor.BgBlack`,
                            `        switch (options.type) {`,
                            `            case 'info':`,
                            `                color = TerminalColor.FgBlue`,
                            `                break`,
                            `            case 'warning':`,
                            `                color = TerminalColor.FgYellow`,
                            `                break`,
                            `            case 'success':`,
                            `                color = TerminalColor.FgGreen`,
                            `                break`,
                            `            case 'error':`,
                            `                color = TerminalColor.FgRed`,
                            `                break`,
                            `            default:`,
                            `                color = TerminalColor.FgWhite`,
                            `        }`,
                            `        console.log(`,
                            `            \`[\${currentTimestamp()}]\`,`,
                            `            color,`,
                            `            message,`,
                            `            TerminalColor.Reset`,
                            `        )`,
                            `    }`,
                            `}`,
                            `export function difference(object: any, base: any) {`,
                            `    function changes(object, base) {`,
                            `        return _.transform(object, function (result, value, key) {`,
                            `            if (!_.isEqual(value, base[key])) {`,
                            `                result[key] =`,
                            `                    _.isObject(value) && _.isObject(base[key])`,
                            `                        ? changes(value, base[key])`,
                            `                        : value`,
                            `            }`,
                            `        })`,
                            `    }`,
                            `    return changes(object, base)`,
                            `}`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'constant.ts',
                        contents: [
                            `export const Error = {`,
                            `    TypeRequired: 'Type required',`,
                            `    Unauthorized: 'Unauthorized Access',`,
                            `    InternalError: 'Ooops! Something goes wrong',`,
                            `    UserDataRequired: 'User data required',`,
                            `    PasswordMismatch: 'Your password is not match',`,
                            `    InvalidCredential: 'Wrong email or password',`,
                            `    InvalidToken: 'Invalid Token',`,
                            `    NameRequired: 'Name required',`,
                            `    PhoneRequired: 'Phone required',`,
                            `    IdRequired: 'ID required',`,
                            `    DataNotFound: 'Data not found',`,
                            `    NameAlreadyExist: 'Name already exist',`,
                            `    LocationRequired: 'Location required',`,
                            `    DataAlreadyExist: 'Data Already Exist',`,
                            `    DataRequired: 'Data Required',`,
                            `    OrgIdRequired: 'Organization Id required',`,
                            `    ArrayOfDataRequired: 'Array of data is required',`,
                            `}`,
                            `export const Message = {`,
                            `    DataRemoved: 'Data successfully removed',`,
                            `    FileUploaded: 'File uploaded'`,
                            `}`,
                            `export enum MessageStatus {`,
                            `    Sent = 'Sent',`,
                            `    Pending = 'Pending'`,
                            `}`,
                            `export enum UserRoles {`,
                            `    SuperAdmin = 'Super Admin',`,
                            `    Admin = 'Admin',`,
                            `    Manager = 'Manager',`,
                            `    Supervisor = 'Supervisor',`,
                            `    Staff = 'Staff',`,
                            `    Guest = 'Guest'`,
                            `}`,
                            `export const TerminalColor = {`,
                            `    Reset: '\x1b[0m',`,
                            `    Bright: '\x1b[1m',`,
                            `    Dim: '\x1b[2m',`,
                            `    Underscore: '\x1b[4m',`,
                            `    Blink: '\x1b[5m',`,
                            `    Reverse: '\x1b[7m',`,
                            `    Hidden: '\x1b[8m',`,
                            ``,
                            `    FgBlack: '\x1b[30m',`,
                            `    FgRed: '\x1b[31m',`,
                            `    FgGreen: '\x1b[32m',`,
                            `    FgYellow: '\x1b[33m',`,
                            `    FgBlue: '\x1b[34m',`,
                            `    FgMagenta: '\x1b[35m',`,
                            `    FgCyan: '\x1b[36m',`,
                            `    FgWhite: '\x1b[37m',`,
                            ``,
                            `    BgBlack: '\x1b[40m',`,
                            `    BgRed: '\x1b[41m',`,
                            `    BgGreen: '\x1b[42m',`,
                            `    BgYellow: '\x1b[43m',`,
                            `    BgBlue: '\x1b[44m',`,
                            `    BgMagenta: '\x1b[45m',`,
                            `    BgCyan: '\x1b[46m',`,
                            `    BgWhite: '\x1b[47m'`,
                            `}`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'interface.ts',
                        contents: [
                            `export interface iPrintLog {`,
                            `    includeProd?: boolean`,
                            `    type?: 'default' | 'info' | 'warning' | 'success' | 'error'`,
                            `}`
                        ]
                    }
                ]
            },
            {
                type: 'directory',
                name: 'policies',
                childs: [
                    {
                        type: 'file',
                        name: 'auth.policy.ts',
                        contents: [
                            `import { NextFunction, Request, Response } from 'express'`,
                            ``,
                            `import { Error, UserRoles } from '../commons/constant'`,
                            `import { AuthService } from '../services/auth.service'`,
                            ``,
                            `export const AuthPolicy = {`,
                            `    verifyToken: (req: Request, res: Response, next: NextFunction) => {`,
                            `        let tokenToVerify: string`,
                            ``,
                            `        if (req.header('Authorization')) {`,
                            `            const parts = req.header('Authorization').split(' ')`,
                            ``,
                            `            if (parts.length === 2) {`,
                            `                const scheme = parts[0]`,
                            `                const credentials = parts[1]`,
                            ``,
                            `                if (/^Bearer$/.test(scheme)) {`,
                            `                    tokenToVerify = credentials`,
                            `                } else {`,
                            `                    return res.status(401).json(Error.InvalidToken)`,
                            `                }`,
                            `            } else {`,
                            `                return res.status(401).json(Error.InvalidToken)`,
                            `            }`,
                            `        } else if (req.body.token) {`,
                            `            tokenToVerify = req.body.token`,
                            `            delete req.query.token`,
                            `        } else {`,
                            `            return res.status(401).json(Error.InvalidToken)`,
                            `        }`,
                            `        return AuthService.verify(tokenToVerify, (err, thisToken) => {`,
                            `            if (err) return res.status(401).json(Error.InvalidToken)`,
                            `            req['user'] = thisToken`,
                            `            return next()`,
                            `        })`,
                            `    },`,
                            `    isSuperAdmin: (req: Request, res: Response, next: NextFunction) => {`,
                            `        if (req['user']) {`,
                            `            if (req['user'].roles.includes(UserRoles.SuperAdmin)) return next()`,
                            `        }`,
                            `        return res.status(401).json(Error.Unauthorized)`,
                            `    },`,
                            `}`
                        ]
                    }
                ]
            },
            {
                type: 'directory',
                name: 'services',
                childs: [
                    {
                        type: 'file',
                        name: 'bcrypt.service.ts',
                        contents: [
                            `import bcrypt from 'bcrypt-nodejs'`,
                            ``,
                            `export const password = (user) => {`,
                            `    const salt = bcrypt.genSaltSync()`,
                            `    const hash = bcrypt.hashSync(user.password, salt)`,
                            `    return hash`,
                            `}`,
                            ``,
                            `export const comparePassword = (pw, hash) => bcrypt.compareSync(pw, hash)`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'api.service.ts',
                        contents: [
                            `import bodyParser from 'body-parser'`,
                            `import cors from 'cors'`,
                            `import express from 'express'`,
                            `import basicAuth from 'express-basic-auth'`,
                            `import helmet from 'helmet'`,
                            `import http from 'http'`,
                            `import swaggerUI from 'swagger-ui-express'`,
                            `import config from '../../config'`,
                            `import { currentTimestamp } from '../commons/function'`,
                            `import { default as Routes } from '../routes'`,
                            ``,
                            `export const API = {`,
                            `    start: () => {`,
                            `        // environment: development, staging, testing, production`,
                            `        const environment = process.env.NODE_ENV`,
                            ``,
                            `        /**`,
                            `         * express application`,
                            `         */`,
                            `        const app = express()`,
                            `        const server = new http.Server(app)`,
                            `        app.use(cors())`,
                            ``,
                            `        // Swagger API Docs`,
                            `        app.use(`,
                            `            '/api-docs',`,
                            `            basicAuth({`,
                            `                users: {`,
                            `                    [config.swaggerCredential.username]:`,
                            `                        config.swaggerCredential.password`,
                            `                },`,
                            `                challenge: true`,
                            `            }),`,
                            `            swaggerUI.serve,`,
                            `            swaggerUI.setup(config.swaggerSpecs)`,
                            `        )`,
                            ``,
                            `        // secure express app`,
                            `        app.use(`,
                            `            helmet({`,
                            `                dnsPrefetchControl: false,`,
                            `                frameguard: false,`,
                            `                ieNoOpen: false`,
                            `            })`,
                            `        )`,
                            ``,
                            `        // parsing the request bodys`,
                            `        app.use(bodyParser.urlencoded({ extended: false }))`,
                            `        app.use(bodyParser.json())`,
                            ``,
                            `        app.use('/api', Routes)`,
                            ``,
                            `        server.listen(config.port, () => {`,
                            `            if (`,
                            `                process.env.NODE_ENV !== 'production' &&`,
                            `                process.env.NODE_ENV !== 'development' &&`,
                            `                process.env.NODE_ENV !== 'testing'`,
                            `            ) {`,
                            `                console.error(`,
                            `                    \`NODE_ENV is set to \${environment}, but only production and development are valid.\``,
                            `                )`,
                            `                process.exit(1)`,
                            `            }`,
                            `            console.info(`,
                            `                \`[\${currentTimestamp()}] API: Listening on port \${config.port}\``,
                            `            )`,
                            `        })`,
                            `    }`,
                            `}`,
                            ``,
                            `export default API`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'auth.service.ts',
                        contents: [
                            `import jwt from 'jsonwebtoken'`,
                            `export interface IssueTokenData {`,
                            `    id: string`,
                            `    ip: string`,
                            `    roles: string[]`,
                            `    orgId: string`,
                            `}`,
                            `const secret =`,
                            `    process.env.NODE_ENV === 'production' ? process.env.JWT_SECRET : 'secret'`,
                            ``,
                            `export const AuthService = {`,
                            `    issue: (payload: string | IssueTokenData | Buffer) =>`,
                            `        jwt.sign(payload, secret, { expiresIn: 10800 }),`,
                            `    verify: (token: string, cb: jwt.VerifyCallback<jwt.JwtPayload>) =>`,
                            `        jwt.verify(token, secret, {}, cb)`,
                            `}`
                        ]
                    },
                    {
                        type: 'file',
                        name: 'db.service.ts',
                        contents: [
                            `import fs from 'fs'`,
                            `import { sequelize as database } from '../../config/database'`,
                            `import { currentTimestamp, printLog } from '../commons/function'`,
                            `import { UserRoles } from '../commons/constant'`,
                            `import { User, UserRole } from '../models/user.model'`,
                            `import { Organization } from '../models/organization.model'`,
                            `import { Migration } from '../models/migration.model'`,
                            `import { Sequelize } from 'sequelize'`,
                            `import glob from 'glob'`,
                            `import moment from 'moment'`,
                            ``,
                            `export const dbService = (environment: string, migrate: boolean) => {`,
                            `    const authenticateDB = async () => {`,
                            `        try {`,
                            `            process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] connecting to db with env: \${environment}\`)`,
                            `            await database.authenticate()`,
                            `            process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] DB Connected\`)`,
                            `        } catch (error) {`,
                            `            process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] db connection error: \`, error)`,
                            `        }`,
                            `    }`,
                            `    const dropDB = () => database.drop({ cascade: true })`,
                            `    const refreshAssociations = () => {`,
                            `        // Put your Table Association here`,
                            `        User.belongsToMany(UserRole, { through: 'RoleUsers' })`,
                            `        User.belongsTo(Organization)`,
                            `        Organization.hasMany(Organization, {`,
                            `            as: 'child',`,
                            `            foreignKey: 'parentId'`,
                            `        })`,
                            `        Organization.belongsTo(Organization, {`,
                            `            as: 'parent',`,
                            `            foreignKey: 'parentId'`,
                            `        })`,
                            `        Organization.hasMany(User)`,
                            `    }`,
                            ``,
                            `    const syncDB = async () => {`,
                            `        await database.query('create extension if not exists postgis', {`,
                            `            raw: true`,
                            `        })`,
                            `        refreshAssociations()`,
                            `        await database.sync()`,
                            `    }`,
                            `    const syncFunctions = async () => {`,
                            `        process.env.NODE_ENV === 'production' && console.log(\`[\${currentTimestamp()}] SQL: creating functions\`)`,
                            `        const files = glob.sync('./sql/functions/*.sql')`,
                            `        for (const file of files) {`,
                            `            try {`,
                            `                const query = fs.readFileSync(file, 'utf8')`,
                            `                await database.query(query, { raw: true })`,
                            `            } catch (error) {`,
                            `                process.env.DEBUG === 'true' && printLog(String(error), { type: 'warning' })`,
                            `            }`,
                            `        }`,
                            `    }`,
                            `    const startMigration = async () => {`,
                            `        process.env.NODE_ENV === 'production' && console.log(\`[\${currentTimestamp()}] SQL: startMigration\`)`,
                            `        const files = glob.sync('./sql/migrations/*.sql')`,
                            `        for (const file of files) {`,
                            `            try {`,
                            `                const exists = await Migration.findOne({ where: { name: file } })`,
                            `                if (!exists) {`,
                            `                    process.env.DEBUG === 'true' && printLog(\`Executing migration file: \${file}\`)`,
                            `                    await Migration.create({ name: file })`,
                            `                    const query = fs.readFileSync(file, 'utf8')`,
                            `                    await database.query(query, { raw: true })`,
                            `                }`,
                            `            } catch (error) {`,
                            `                process.env.DEBUG === 'true' && printLog(String(error), { type: 'warning' })`,
                            `            }`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const seedData = async () => {`,
                            `        process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] SQL: seeding data\`)`,
                            ``,
                            `        // check for existing org data`,
                            `        let newOrg: Organization`,
                            `        const orgData = {`,
                            `            name: 'TEST ORG'`,
                            `        }`,
                            `        newOrg = await Organization.findOne({ where: orgData })`,
                            `        if (!newOrg) {`,
                            `            process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] SQL: seeding Organization \`, orgData)`,
                            `            newOrg = await Organization.create(orgData)`,
                            `        }`,
                            ``,
                            `        let roleData = Object.values(UserRoles).map((x) => {`,
                            `            return {`,
                            `                name: x,`,
                            `                enable: true`,
                            `            }`,
                            `        })`,
                            `        for (const role of roleData) {`,
                            `            const newRole = await UserRole.findOne({`,
                            `                where: { name: role.name }`,
                            `            })`,
                            `            if (!newRole) {`,
                            `                process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] SQL: seeding user role: \`, role)`,
                            `                await UserRole.create(role)`,
                            `            }`,
                            `        }`,
                            ``,
                            `        const superAdminRole = await UserRole.findOne({`,
                            `            where: { name: UserRoles.SuperAdmin }`,
                            `        })`,
                            ``,
                            `        // check existing superAdmin user`,
                            `        const userData = {`,
                            `            email: 'sa@example.com',`,
                            `            password: 'S3cret!',`,
                            `            firstName: 'Super',`,
                            `            lastName: 'Administrator'`,
                            `        }`,
                            `        let superAdminUser: User = await User.findOne({`,
                            `            where: { email: userData.email }`,
                            `        })`,
                            `        if (!superAdminUser) {`,
                            `            process.env.DEBUG === 'true' && console.log(\`[\${currentTimestamp()}] SQL: seeding super admin: \`, userData)`,
                            `            superAdminUser = await newOrg.createUser(userData)`,
                            `            superAdminUser.addUserRoles(superAdminRole)`,
                            `        }`,
                            `    }`,
                            `    const successfulDBStart = async () => {`,
                            `        process.env.NODE_ENV === 'production' && console.info(\`[\${currentTimestamp()}] SQL: Connected to database\`)`,
                            `        await syncFunctions()`,
                            `    }`,
                            ``,
                            `    const errorDBStart = (err) => console.info('unable to connect to the database:', err)`,
                            ``,
                            `    const wrongEnvironment = () => {`,
                            `        console.warn(\`[\${currentTimestamp()}] NODE: Wrong NODE_ENV "\${environment}"\`)`,
                            `        return process.exit(1)`,
                            `    }`,
                            ``,
                            `    const startMigrateTrue = async () => {`,
                            `        try {`,
                            `            await syncDB()`,
                            `            await successfulDBStart()`,
                            `            await startMigration()`,
                            `            await seedData()`,
                            `        } catch (err) {`,
                            `            errorDBStart(err)`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const startMigrateFalse = async () => {`,
                            `        try {`,
                            `            await dropDB()`,
                            `            await syncDB()`,
                            `            await successfulDBStart()`,
                            `            await startMigration()`,
                            `            await seedData()`,
                            `        } catch (err) {`,
                            `            errorDBStart(err)`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const startDev = async () => {`,
                            `        try {`,
                            `            await authenticateDB()`,
                            ``,
                            `            if (migrate) {`,
                            `                return startMigrateTrue()`,
                            `            }`,
                            ``,
                            `            return startMigrateFalse()`,
                            `        } catch (err) {`,
                            `            return errorDBStart(err)`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const startStage = async () => {`,
                            `        try {`,
                            `            await authenticateDB()`,
                            ``,
                            `            if (migrate) {`,
                            `                return startMigrateTrue()`,
                            `            }`,
                            ``,
                            `            return startMigrateFalse()`,
                            `        } catch (err) {`,
                            `            return errorDBStart(err)`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const startTest = async () => {`,
                            `        try {`,
                            `            await authenticateDB()`,
                            `            await startMigrateFalse()`,
                            `        } catch (err) {`,
                            `            errorDBStart(err)`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const startProd = async () => {`,
                            `        try {`,
                            `            await authenticateDB()`,
                            `            await startMigrateTrue()`,
                            `        } catch (err) {`,
                            `            errorDBStart(err)`,
                            `        }`,
                            `    }`,
                            ``,
                            `    const start = async () => {`,
                            `        switch (environment) {`,
                            `            case 'development':`,
                            `                await startDev()`,
                            `                return true`,
                            `            case 'staging':`,
                            `                await startStage()`,
                            `                return true`,
                            `            case 'testing':`,
                            `                await startTest()`,
                            `                return true`,
                            `            case 'production':`,
                            `                await startProd()`,
                            `                return true`,
                            `            default:`,
                            `                await wrongEnvironment()`,
                            `                return false`,
                            `        }`,
                            `    }`,
                            ``,
                            `    return {`,
                            `        start`,
                            `    }`,
                            `}`
                        ]
                    }
                ]
            },
            {
                type: 'file',
                name: 'index.ts',
                description: 'App Entry point',
                contents: [
                    `import config from '../config'`,
                    `import API from './services/api.service'`,
                    `import { dbService } from './services/db.service'`,
                    `const startAllServices = async () => {`,
                    `    // put which services that you need to run here`,
                    `    await dbService(process.env.NODE_ENV, config.migrate).start()`,
                    ``,
                    `    API.start()`,
                    `}`,
                    `startAllServices()`
                ]
            }
        ]
    },
    {
        type: 'directory',
        name: 'test',
        childs: [
            {
                type: 'file',
                name: 'setup.ts',
                description: 'Testing framework configuration',
                contents: [
                    `import bodyParser from 'body-parser'`,
                    `import express from 'express'`,
                    `import { sequelize as database } from '../config/database'`,
                    `import { dbService } from '../src/services/db.service'`,
                    `import routes from '../src/routes'`,
                    `import request from 'supertest'`,
                    `export type Props = {`,
                    `    url: string`,
                    `    data?: string | object | undefined`,
                    `    token?: string`,
                    `}`,
                    `export type Instance = {`,
                    `    get: (props: Props) => Promise<request.Response>`,
                    `    post: (props: Props) => Promise<request.Response>`,
                    `    put: (props: Props) => Promise<request.Response>`,
                    `    delete: (props: Props) => Promise<request.Response>`,
                    `}`,
                    `export const beforeAction = async () => {`,
                    `    await dbService('testing', false).start()`,
                    `    const testapp = express()`,
                    `    testapp.use(bodyParser.urlencoded({ extended: false }))`,
                    `    testapp.use(bodyParser.json())`,
                    ``,
                    `    testapp.use('/api', routes)`,
                    `    const instance = () => {`,
                    `        return {`,
                    `            get: async (props: Props) => {`,
                    `                if (props.token) {`,
                    `                    return await request(testapp).get(props.url).set('Authorization', \`Bearer \${props.token}\`)`,
                    `                } else {`,
                    `                    return await request(testapp).get(props.url)`,
                    `                }`,
                    `            },`,
                    `            post: async (props: Props) => {`,
                    `                if (props.token) {`,
                    `                    return await request(testapp).post(props.url).set('Authorization', \`Bearer \${props.token}\`).send(props.data)`,
                    `                } else {`,
                    `                    return await request(testapp).post(props.url).send(props.data)`,
                    `                }`,
                    `            },`,
                    `            put: async (props: Props) => {`,
                    `                if (props.token) {`,
                    `                    return await request(testapp).put(props.url).set('Authorization', \`Bearer \${props.token}\`).send(props.data)`,
                    `                } else {`,
                    `                    return await request(testapp).put(props.url).send(props.data)`,
                    `                }`,
                    `            },`,
                    `            delete: async (props: Props) => {`,
                    `                if (props.token) {`,
                    `                    return await request(testapp).delete(props.url).set('Authorization', \`Bearer \${props.token}\`).send(props.data)`,
                    `                } else {`,
                    `                    return await request(testapp).delete(props.url).send(props.data)`,
                    `                }`,
                    `            }`,
                    `        }`,
                    `    }`,
                    `    return instance()`,
                    `}`,
                    ``,
                    `export const afterAction = async () => {`,
                    `    await database.close()`,
                    `}`
                ]
            },
            {
                type: 'directory',
                name: 'controllers',
                childs: [
                    {
                        type: 'file',
                        name: 'user.controller.test.ts',
                        contents: [
                            `import { UserRoles } from '../../src/commons/constant'`,
                            `import { Organization } from '../../src/models/organization.model'`,
                            `import { User, UserRole } from '../../src/models/user.model'`,
                            `import { afterAction, beforeAction, Instance } from '../setup'`,
                            `describe('Testing /api/users endpoint', () => {`,
                            `    let api: Instance`,
                            `    let superUser`,
                            `    let authToken`,
                            `    beforeAll(async () => {`,
                            `        api = await beforeAction()`,
                            `        const auth = await api.post({`,
                            `            url: '/api/login',`,
                            `            data: {`,
                            `                email: 'sa@example.com',`,
                            `                password: 'S3cret!'`,
                            `            }`,
                            `        })`,
                            `        expect(auth.status).toBe(200)`,
                            `        authToken = auth.body.token`,
                            `    })`,
                            ``,
                            `    afterAll(() => {`,
                            `        afterAction()`,
                            `    })`,
                            `    test('Get all user', async () => {`,
                            `        const res = await api.get({ url: '/api/users', token: authToken })`,
                            `        expect(res.status).toBe(200)`,
                            `        expect(Array.isArray(res.body)).toBeTruthy()`,
                            `    })`,
                            `    test('Create User', async () => {`,
                            `        const org = await Organization.create({ name: 'TEST' })`,
                            `        const role = await UserRole.findOne({ where: { name: UserRoles.Guest } })`,
                            `        const res = await api.post({`,
                            `            url: '/api/users',`,
                            `            token: authToken,`,
                            `            data: {`,
                            `                firstName: 'John',`,
                            `                lastName: 'Doe',`,
                            `                email: 'user@example.com',`,
                            `                password: 'string',`,
                            `                confirmPassword: 'string',`,
                            `                orgId: org.id,`,
                            `                roleId: role.id`,
                            `            }`,
                            `        })`,
                            `        expect(res.status).toBe(200)`,
                            `        expect(res.body.user).toBeTruthy()`,
                            `        const user = await User.findByPk(res.body.user.id)`,
                            `        expect(user.id).toBe(res.body.user.id)`,
                            `        expect(user.email).toBe(res.body.user.email)`,
                            `        await user.destroy()`,
                            `    })`,
                            `})`
                        ]
                    }
                ]
            }
        ]
    },
    {
        type: 'file',
        name: '.editorconfig',
        contents: [
            `root = true`,
            `[*]`,
            `indent_style = space`,
            `indent_size = 4`,
            `end_of_line = lf`,
            `charset = utf-8`,
            `trim_trailing_whitespace = true`,
            `insert_final_newline = true`
        ]
    },
    {
        type: 'file',
        name: '.gitignore',
        contents: [
            `node_modules`,
            `dist`,
            `.DS_Store`,
            'npm-debug.log*',
            'yarn-debug.log*',
            'yarn-error.log*'
        ]
    },
    {
        type: 'file',
        name: '.prettierrc',
        contents: [
            `{`,
            `  "printWidth": 150,`,
            `  "singleQuote": true,`,
            `  "trailingComma": "none",`,
            `  "semi": false,`,
            `  "tabWidth": 4,`,
            `  "trailingWhitespace": "none"`,
            `}`
        ]
    },
    {
        type: 'file',
        name: 'babel.config.js',
        contents: [
            `module.exports = {`,
            `  presets: [`,
            `    ['@babel/preset-env', { targets: { node: 'current' } }],`,
            `    '@babel/preset-typescript'`,
            `  ]`,
            `};`
        ]
    },
    {
        type: 'file',
        name: 'docker-compose.yml',
        contents: [
            `version: '3'`,
            `services:`,
            `    api:`,
            `        image: $L:APP_NAME:latest`,
            `        container_name: '$L:APP_NAME-api'`,
            `        hostname: $L:APP_NAME-api`,
            `        environment:`,
            `            NODE_ENV: production`,
            `            JWT_SECRET: '$F:RANDOM_STRING'`,
            `            DB_HOST: $L:APP_NAME-db`,
            `            DB_USER: $DB_USER`,
            `            DB_PASS: $DB_PASS`,
            `            DB_NAME: $L:APP_NAME`,
            `        build:`,
            `            context: .`,
            `            dockerfile: Dockerfile`,
            `        depends_on:`,
            `            - postgres`,
            `        networks:`,
            `            - net`,
            `        ports:`,
            `            - '7000:7000'`,
            `        restart: always`,
            `        volumes:`,
            `            - /tmp:/app/upload`,
            `    postgres:`,
            `        image: kartoza/postgis:13.0`,
            `        hostname: $L:APP_NAME-db`,
            `        container_name: '$L:APP_NAME-db'`,
            `        ports:`,
            `            - '35432:5432'`,
            `        restart: always`,
            `        environment:`,
            `            POSTGRES_USER: $DB_USER`,
            `            POSTGRES_PASSWORD: $DB_PASS`,
            `            POSTGRES_DB: $L:APP_NAME`,
            `            POSTGRES_MULTIPLE_EXTENSIONS: 'postgis,hstore,postgis_topology,postgis_raster,pgrouting'`,
            `        networks:`,
            `            - net`,
            `        volumes:`,
            `            - database:/var/lib/postgresql/data`,
            `networks:`,
            `    net:`,
            `        driver: bridge`,
            `volumes:`,
            `    database:`
        ]
    },
    {
        type: 'file',
        name: 'Dockerfile',
        contents: [
            `FROM node:16`,
            `RUN  apt-get update \\`,
            `    && apt-get upgrade -y \\`,
            `    && apt-get install -y g++ make python wget gnupg ca-certificates procps libxss1 unzip \\`,
            `    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\`,
            `    && bash -c "echo deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main >> /etc/apt/sources.list.d/pgdg.list" \\`,
            `    && wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | apt-key add - \\`,
            `    && apt-get update \\`,
            `    && apt-get install -y postgresql-client-12 tzdata \\`,
            `    && rm -rf /var/lib/apt/lists/* \\`,
            `    && wget --quiet https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -O /usr/sbin/wait-for-it.sh \\`,
            `    && chmod +x /usr/sbin/wait-for-it.sh`,
            `WORKDIR /app`,
            `COPY dist.zip .`,
            `RUN unzip dist.zip`,
            `RUN rm dist.zip`,
            `RUN yarn install`,
            `EXPOSE 7000`,
            `ENV TZ Asia/Jakarta`,
            `ENTRYPOINT ["node", "src/index.js"]`
        ]
    },
    {
        type: 'file',
        name: 'Makefile',
        contents: [
            `docker:`,
            `	yarn build`,
            `	docker-compose -p $L:APP_NAME -f docker-compose.yml build`,
            `	docker-compose -p $L:APP_NAME -f docker-compose.yml up --remove --detach`
        ]
    },
    {
        type: 'file',
        name: 'nodemon.json',
        contents: [
            `{`,
            `  "watch": ["./src","./config"],`,
            `  "ext": "ts,json",`,
            `  "ignore": ["./src/**/*.spec.ts"],`,
            `  "exec": "ts-node ./src/index.ts"`,
            `}`
        ]
    },
    {
        type: 'file',
        name: 'package.json',
        contents: [
            `{`,
            `    "name": "$L:APP_NAME",`,
            `    "version": "0.0.0",`,
            `    "author": "$AUTHOR",`,
            `    "license": "$LICENSE",`,
            `    "repository": {`,
            `        "type": "git",`,
            `        "url": "$GIT_URL"`,
            `    },`,
            `    "homepage": "$GIT_URL#readme",`,
            `    "bugs": {`,
            `        "url": "$GIT_URL/issues"`,
            `    },`,
            `    "scripts": {`,
            `        "start": "cross-env API_PORT=8000 NODE_ENV=development nodemon",`,
            `        "debug": "cross-env API_PORT=8000 NODE_ENV=development nodemon",`,
            `        "lint": "tslint -c tslint.json -p tsconfig.json",`,
            `        "test": "cross-env NODE_ENV=testing jest --testTimeout=30000 --runInBand --forceExit --detectOpenHandles",`,
            `        "tsc": "tsc",`,
            `        "cpsql": "cp -r sql package.json dist/",`,
            `        "bundle": "cd ./dist/ && zip -r ../dist.zip *",`,
            `        "cleanup": "rimraf dist/ dist.zip",`,
            `        "build": "cross-env NODE_ENV=production npm-run-all cleanup lint tsc cpsql bundle"`,
            `    },`,
            `    "jest": {`,
            `        "globals": {`,
            `            "__DEV__": true`,
            `        },`,
            `        "testEnvironment": "node",`,
            `        "testPathIgnorePatterns": [`,
            `            "/node_modules/"`,
            `        ]`,
            `    },`,
            `    "dependencies": {`,
            `        "axios": "^0.21.1",`,
            `        "bcrypt": "^5.0.1",`,
            `        "bcrypt-nodejs": "^0.0.3",`,
            `        "body-parser": "^1.19.0",`,
            `        "core-js": "^3.15.2",`,
            `        "cors": "^2.8.5",`,
            `        "express": "^4.17.1",`,
            `        "express-basic-auth": "^1.2.0",`,
            `        "express-routes-mapper": "^1.1.0",`,
            `        "false": "^0.0.4",`,
            `        "glob": "^7.2.0",`,
            `        "helmet": "^4.6.0",`,
            `        "jsonwebtoken": "^8.5.1",`,
            `        "lodash": "^4.17.21",`,
            `        "moment": "^2.29.1",`,
            `        "moment-timezone": "^0.5.33",`,
            `        "multer": "^1.4.3",`,
            `        "pg": "^8.6.0",`,
            `        "pg-hstore": "^2.3.4",`,
            `        "reflect-metadata": "^0.1.13",`,
            `        "sequelize": "^6.6.5",`,
            `        "sequelize-typescript": "^2.1.0",`,
            `        "sharp": "^0.29.1",`,
            `        "swagger-jsdoc": "^6.1.0",`,
            `        "swagger-ui-express": "^4.1.6"`,
            `    },`,
            `    "devDependencies": {`,
            `        "@babel/core": "^7.14.8",`,
            `        "@babel/preset-env": "^7.14.8",`,
            `        "@babel/preset-typescript": "^7.14.5",`,
            `        "@types/bcrypt-nodejs": "^0.0.31",`,
            `        "@types/body-parser": "^1.19.1",`,
            `        "@types/cors": "^2.8.12",`,
            `        "@types/express": "^4.17.13",`,
            `        "@types/glob": "^7.1.4",`,
            `        "@types/jest": "^26.0.24",`,
            `        "@types/jsonwebtoken": "^8.5.4",`,
            `        "@types/moment": "^2.13.0",`,
            `        "@types/moment-timezone": "^0.5.30",`,
            `        "@types/multer": "^1.4.7",`,
            `        "@types/node": "^16.4.1",`,
            `        "@types/pg": "^8.6.1",`,
            `        "@types/sequelize": "^4.28.10",`,
            `        "@types/sharp": "^0.28.5",`,
            `        "@types/supertest": "^2.0.11",`,
            `        "@types/swagger-jsdoc": "^6.0.1",`,
            `        "@types/swagger-ui-express": "^4.1.3",`,
            `        "@types/validator": "^13.6.3",`,
            `        "@typescript-eslint/eslint-plugin": "^4.28.4",`,
            `        "@typescript-eslint/parser": "^4.28.4",`,
            `        "babel-jest": "^27.0.6",`,
            `        "cross-env": "^7.0.3",`,
            `        "eslint": "^7.31.0",`,
            `        "eslint-config-airbnb": "^18.2.1",`,
            `        "eslint-config-airbnb-base": "^14.2.1",`,
            `        "eslint-config-prettier": "^8.3.0",`,
            `        "eslint-plugin-import": "^2.23.4",`,
            `        "eslint-plugin-jest": "^24.3.6",`,
            `        "eslint-plugin-jsx-a11y": "^6.4.1",`,
            `        "eslint-plugin-prettier": "^3.4.0",`,
            `        "eslint-plugin-react": "^7.24.0",`,
            `        "eslint-plugin-react-hooks": "^4.2.0",`,
            `        "husky": "^6.0.0",`,
            `        "jest": "^27.0.6",`,
            `        "nodemon": "^2.0.7",`,
            `        "npm-run-all": "^4.1.5",`,
            `        "prettier": "^2.3.2",`,
            `        "rimraf": "^3.0.2",`,
            `        "sequelize-cli": "^6.2.0",`,
            `        "shx": "^0.3.3",`,
            `        "supertest": "^6.1.3",`,
            `        "ts-node": "^10.1.0",`,
            `        "tslint": "^6.1.3",`,
            `        "typescript": "^4.3.5"`,
            `    }`,
            `}`
        ]
    },
    {
        type: 'file',
        name: 'tsconfig.json',
        contents: [
            `{`,
            `    "compileOnSave": false,`,
            `    "compilerOptions": {`,
            `        "target": "es2021",`,
            `        "module": "commonjs",`,
            `        "declaration": false,`,
            `        "noImplicitAny": false,`,
            `        "removeComments": false,`,
            `        "noLib": false,`,
            `        "emitDecoratorMetadata": true,`,
            `        "experimentalDecorators": true,`,
            `        "moduleResolution": "node",`,
            `        "allowSyntheticDefaultImports": true,`,
            `        "esModuleInterop": true,`,
            `        "sourceMap": true,`,
            `        "resolveJsonModule": true,`,
            `        "outDir": "dist/",`,
            `        "typeRoots": ["node_modules/@types"],`,
            `        "lib": ["es2017", "es2016", "es2015", "dom"]`,
            `    },`,
            `    "include": ["src/**/*"],`,
            `    "exclude": ["node_modules"]`,
            `}`
        ]
    },
    {
        type: 'file',
        name: 'tslint.json',
        contents: [
            `{`,
            `  "rules": {`,
            `      "class-name": false,`,
            `      "comment-format": [true, "check-space"],`,
            `      "indent": [true, "spaces"],`,
            `      "no-duplicate-variable": true,`,
            `      "no-eval": true,`,
            `      "no-internal-module": true,`,
            `      "no-trailing-whitespace": true,`,
            `      "no-unsafe-finally": true,`,
            `      "no-var-keyword": true,`,
            `      "one-line": [true, "check-open-brace", "check-whitespace"],`,
            `      "quotemark": [true, "single"],`,
            `      "semicolon": [true, "never"],`,
            `      "triple-equals": [true, "allow-null-check"],`,
            `      "typedef-whitespace": [`,
            `          true,`,
            `          {`,
            `              "call-signature": "nospace",`,
            `              "index-signature": "nospace",`,
            `              "parameter": "nospace",`,
            `              "property-declaration": "nospace",`,
            `              "variable-declaration": "nospace"`,
            `          }`,
            `      ],`,
            `      "variable-name": [true, "ban-keywords"],`,
            `      "whitespace": [`,
            `          "check-branch",`,
            `          "check-decl",`,
            `          "check-operator",`,
            `          "check-separator",`,
            `          "check-type"`,
            `      ]`,
            `  }`,
            `}`
        ]
    }
]
